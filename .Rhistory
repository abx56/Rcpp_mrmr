if(sum(temploc)){
temp=freq12[temploc,2]*log(freq12[temploc,2]/freq1[2]/freq2[2])
#return (temp)
}
else #return (0)
temp=0
if(sum(temploc)){
temp=freq12[temploc,2]*log(freq12[temploc,2]/freq1[2]/freq2[2])
#return (temp)
}
else temp=0
temp=0
if(sum(temploc)){
temp=freq12[temploc,2]*log(freq12[temploc,2]/freq1[2]/freq2[2])
#return (temp)
}
temp
class(temp)
apply(freq1,1,fun1,freq2=freq2[1,],freq12=freq12)
freq1
freq2
freq1 <- estpab(vec1)
freq2 <- estpab(vec2)
freq12<- estjointpab(vec1,vec2)
apply(freq1,1,fun1,freq2=freq2[1,],freq12=freq12)
freq1
freq2=freq2[1,]
freq2
fun1 <- function(freq1){
temploc=which(freq12==paste(freq1[1],freq2[1]))
if(sum(temploc)){
temp=freq12[temploc,2]*log(freq12[temploc,2]/freq1[2]/freq2[2])
#return (temp)
}
else temp=0
}
apply(freq1,1,fun1)
temploc
freq12
freq2[2]
as.numeric(freq2[2])
fun1 <- function(freq1){
temploc=which(freq12==paste(freq1[1],freq2[1]))
if(sum(temploc)){
temp=as.numeric(freq12[temploc,2])*log(as.numeric(freq12[temploc,2])/as.numeric(freq1[2])/as.numeric(freq2[2]))
#return (temp)
}
else temp=0
}
apply(freq1,1,fun1)
freq1 <- estpab(vec1)
freq2 <- estpab(vec2)
freq12<- estjointpab(vec1,vec2)
temploc=which(freq12==paste(freq1[1],freq2[1]))
if(sum(temploc)){
temp=as.numeric(freq12[temploc,2])*log(as.numeric(freq12[temploc,2])/as.numeric(freq1[2])/as.numeric(freq2[2]))
#return (temp)
}
else temp=0
}
fun1 <- function(freq1,freq2,freq12){
temploc=which(freq12==paste(freq1[1],freq2[1]))
if(sum(temploc)){
temp=as.numeric(freq12[temploc,2])*log(as.numeric(freq12[temploc,2])/as.numeric(freq1[2])/as.numeric(freq2[2]))
#return (temp)
}
else temp=0
}
apply(freq1,1,fun1,freq2=freq2[1,],freq12=freq12)
freq1
freq2
apply(freq2,1,fun1,freq1=freq1[1,],freq12=freq12)
fun1 <- function(freq1,freq2,freq12){
temploc=which(freq12==paste(freq1[1],freq2[1]))
if(sum(temploc)){
temp=as.numeric(freq12[temploc,2])*log(as.numeric(freq12[temploc,2])/as.numeric(freq1[2])/as.numeric(freq2[2]))
return (temp)
}
else return(0)
}
apply(freq1,1,fun1,freq2=freq2[1,],freq12=freq12)
fun2 <- function(freq1,freq2,freq12){
temp <- apply(freq1,1,fun1,freq2=freq2,freq12=freq12)
return (temp)
}
apply(freq2,1,fun2,freq1=freq1,freq12=freq12)
sum(apply(freq2,1,fun2,freq1=freq1,freq12=freq12))
mutualin(vec1,vec2)
mutualinfo(vec1,vec2)
apply(freq2,1,fun2,freq1=freq1,freq12=freq12)
vec1 <- round(as.numeric(vec1))
vec2 <- round(as.numeric(vec2))
m <- length(vec1)
n <- length(vec2)
if (m!=n){
print("the two input vector length differ")
return(0)
}
else{
vec<-paste(vec1,vec2)
freq1 <- estpab(vec1)
freq2 <- estpab(vec2)
freq12<- estjointpab(vec1,vec2)
n1 <- nrow(freq1)
n2 <- nrow(freq2)
mutuinfo=c(0)
for (i in 1:n1){
for(j in 1:n2){
temploc=which(freq12==paste(freq1[i,1],freq2[j,1]))
if(sum(temploc)){
temp[i,j]=freq12[temploc,2]*log(freq12[temploc,2]/freq1[i,2]/freq2[j,2])
#mutuinfo= mutuinfo+temp
}
else{next}
}
}
return (mutuinfo/log(2))
}
temp
apply(freq2,1,fun2,freq1=freq1,freq12=freq12)
sum(apply(freq2,1,fun2,freq1=freq1,freq12=freq12))/log(2)
mutualinfo <- function(vec1,vec2) {
vec1 <- round(as.numeric(vec1))
vec2 <- round(as.numeric(vec2))
fun1 <- function(freq1,freq2,freq12){
temploc=which(freq12==paste(freq1[1],freq2[1]))
if(sum(temploc)){
temp=as.numeric(freq12[temploc,2])*log(as.numeric(freq12[temploc,2])/as.numeric(freq1[2])/as.numeric(freq2[2]))
return (temp)
}
else return(0)
}
fun2 <- function(freq1,freq2,freq12){
temp <- apply(freq1,1,fun1,freq2=freq2,freq12=freq12)
return (temp)
}
mutual=sum(apply(freq2,1,fun2,freq1=freq1,freq12=freq12))/log(2)
return (mutual)
}
mutualinfo(vec1,vec2)
mutualin(vec1,vec2)
mrmr_mid(data,f,5)
Sys.time(mrmr_mid(data,f,5))
system.time(mrmr_mid(data,f,5))
data=matrix(sample(seq(1,50,by=1),100,replace=TRUE),100,100)
f=sample(seq(1,4,by=1),100,replace=TRUE)
system.time(mrmr_mid(data,f,10))
getonefea <- function(fea,tloc,f,data){
temploc=tloc[!(tloc %in% fea)]
tempfea=sapply(temploc,function(a,fea) c(fea,a),fea=fea)
allD_R=apply(tempfea,2,D_R,f=f,data=data)
fea=c(fea,temploc[which.max(allD_R)])
return(fea)
}
mrmr_mid <- function(data,f,K){
t<-vector(mode="numeric",length=0)
t = apply(data,2,mutualinfo,vec2=f)
tloc=order(x<--t,y<-1:length(t))
fea<-vector(mode="numeric",length=0)
fea[1]=tloc[1]
for (i in 1:K){
fea=getonefea(fea,tloc,f,data)
}
return (fea)
}
system.time(mrmr_mid(data,f,10))
f=sample(seq(1,3,by=1),10,replace=TRUE)
data=matrix(sample(seq(1,20,by=1),100,replace=TRUE),10,10)
system.time(mrmr_mid(data,f,5))
system.time(mutualin(vec1,vec2))
system.time(mutualinfo(vec1,vec2))
system.time(mutualin(vec1,vec2))
system.time(mutualinfo(vec1,vec2))
vec1=sample(seq(1,10,by=1),1000,replace=TRUE)
vec2=sample(seq(1,10,by=1),1000,replace=TRUE)
system.time(mutualin(vec1,vec2))
system.time(mutualinfo(vec1,vec2))
system.time(mutualin(vec1,vec2))
system.time(mutualinfo(vec1,vec2))
vec2=sample(seq(1,100,by=1),100000,replace=TRUE)
vec1=sample(seq(1,100,by=1),100000,replace=TRUE)
system.time(mutualin(vec1,vec2))
vec2=sample(seq(1,100,by=1),10000,replace=TRUE)
vec1=sample(seq(1,100,by=1),10000,replace=TRUE)
system.time(mutualinfo(vec1,vec2))
system.time(mutualin(vec1,vec2))
mutualin(vec1,vec2)
mutualinfo(vec1,vec2)
vec2=sample(seq(1,50,by=1),10000,replace=TRUE)
vec1=sample(seq(1,50,by=1),10000,replace=TRUE)
system.time(mutualin(vec1,vec2))
system.time(mutualinfo(vec1,vec2))
vec1=sample(seq(1,255,by=1),784,replace=TRUE)
vec2=sample(seq(1,255,by=1),784,replace=TRUE)
system.time(mutualin(vec1,vec2))
system.time(mutualinfo(vec1,vec2))
mutualinfo(vec1,vec2)
vec1=sample(seq(1,25,by=1),784,replace=TRUE)
vec2=sample(seq(1,25,by=1),784,replace=TRUE)
system.time(mutualin(vec1,vec2))
system.time(mutualinfo(vec1,vec2))
mutualinfo(vec1,vec2)
mutualin(vec1,vec2)
mutualinfo <- function(vec1,vec2) {
vec1 <- round(as.numeric(vec1))
vec2 <- round(as.numeric(vec2))
fun1 <- function(freq1,freq2,freq12){
temploc = which(freq12==paste(freq1[1],freq2[1]))
if(sum(temploc)){
temp = as.numeric(freq12[temploc,2])*log(as.numeric(freq12[temploc,2])/as.numeric(freq1[2])/as.numeric(freq2[2]))
return (temp)
}
else return(0)
}
fun2 <- function(freq1,freq2,freq12){
temp = apply(freq1,1,fun1,freq2=freq2,freq12=freq12)
return (temp)
}
mutual = sum(apply(freq2,1,fun2,freq1=freq1,freq12=freq12))/log(2)
return (mutual)
}
mutualin(vec1,vec2)
mutualinfo(vec1,vec2)
vec1=sample(seq(1,25,by=1),100,replace=TRUE)
vec2=sample(seq(1,25,by=1),100,replace=TRUE)
mutualin(vec1,vec2)
mutualinfo(vec1,vec2)
mutual = sum(apply(freq2,1,fun2,freq1=freq1,freq12=freq12))/log(2)
mutual
apply(freq1,1,fun1,freq2=freq2,freq12=freq12)
mutualinfo <- function(vec1,vec2) {
vec1 <- round(as.numeric(vec1))
vec2 <- round(as.numeric(vec2))
fun1 <- function(freq1,freq2,freq12){
temploc = which(freq12==paste(freq1[1],freq2[1]))
if(sum(temploc)){
temp <- as.numeric(freq12[temploc,2])*log(as.numeric(freq12[temploc,2])/as.numeric(freq1[2])/as.numeric(freq2[2]))
return (temp)
}
else return(0)
}
fun2 <- function(freq1,freq2,freq12){
temp <- apply(freq1,1,fun1,freq2=freq2,freq12=freq12)
return (temp)
}
mutual <- sum(apply(freq2,1,fun2,freq1=freq1,freq12=freq12))/log(2)
return (mutual)
}
mutualinfo(vec1,vec2)
vec1 <- round(as.numeric(vec1))
vec2 <- round(as.numeric(vec2))
apply(freq1,1,fun1,freq2=freq2[1,],freq12=freq12)
freq2
temp <- apply(freq1,1,fun1,freq2=freq2[2,],freq12=freq12)
temp
mutual <- sum(apply(freq2,1,fun2,freq1=freq1,freq12=freq12))/log(2)
mutual
apply(freq2,1,fun2,freq1=freq1,freq12=freq12)
sum(apply(freq2,1,fun2,freq1=freq1,freq12=freq12))
vec1=sample(seq(1,3,by=1),10,replace=TRUE)
vec2=sample(seq(1,3,by=1),10,replace=TRUE)
mutualinfo <- function(vec1,vec2) {
vec1 <- round(as.numeric(vec1))
vec2 <- round(as.numeric(vec2))
m <- length(vec1)
n <- length(vec2)
if (m!=n){
print("the two input vector length differ")
return(0)
}
else{
vec<-paste(vec1,vec2)
freq1 <- estpab(vec1)
freq2 <- estpab(vec2)
freq12<- estjointpab(vec1,vec2)
mutual <- sum(apply(freq2,1,fun2,freq1=freq1,freq12=freq12))/log(2)
return (mutual)
}
fun1 <- function(freq1,freq2,freq12){
temploc = which(freq12==paste(freq1[1],freq2[1]))
if(sum(temploc)){
temp <- as.numeric(freq12[temploc,2])*log(as.numeric(freq12[temploc,2])/as.numeric(freq1[2])/as.numeric(freq2[2]))
return (temp)
}
else return(0)
}
fun2 <- function(freq1,freq2,freq12){
temp <- apply(freq1,1,fun1,freq2=freq2[2,],freq12=freq12)
return (temp)
}
mutualin(vec1,vec2)
mutualinfo <- function(vec1,vec2) {
vec1 <- round(as.numeric(vec1))
vec2 <- round(as.numeric(vec2))
m <- length(vec1)
n <- length(vec2)
if (m!=n){
print("the two input vector length differ")
return(0)
}
else{
vec<-paste(vec1,vec2)
freq1 <- estpab(vec1)
freq2 <- estpab(vec2)
freq12<- estjointpab(vec1,vec2)
mutual <- sum(apply(freq2,1,fun2,freq1=freq1,freq12=freq12))/log(2)
return (mutual)
}
}
fun1 <- function(freq1,freq2,freq12){
temploc = which(freq12==paste(freq1[1],freq2[1]))
if(sum(temploc)){
temp <- as.numeric(freq12[temploc,2])*log(as.numeric(freq12[temploc,2])/as.numeric(freq1[2])/as.numeric(freq2[2]))
return (temp)
}
else return(0)
}
fun2 <- function(freq1,freq2,freq12){
temp <- apply(freq1,1,fun1,freq2=freq2[2,],freq12=freq12)
return (temp)
}
mutualin(vec1,vec2)
mutualinfo(vec1,vec2)
mutualinfo <- function(vec1,vec2) {
vec1 <- round(as.numeric(vec1))
vec2 <- round(as.numeric(vec2))
m <- length(vec1)
n <- length(vec2)
if (m!=n){
print("the two input vector length differ")
return(0)
}
else{
vec<-paste(vec1,vec2)
freq1 <- estpab(vec1)
freq2 <- estpab(vec2)
freq12<- estjointpab(vec1,vec2)
mutual <- sum(apply(freq2,1,fun2,freq1=freq1,freq12=freq12))/log(2)
return (mutual)
}
}
fun1 <- function(freq1,freq2,freq12){
temploc = which(freq12==paste(freq1[1],freq2[1]))
if(sum(temploc)){
temp <- as.numeric(freq12[temploc,2])*log(as.numeric(freq12[temploc,2])/as.numeric(freq1[2])/as.numeric(freq2[2]))
return (temp)
}
else return(0)
}
fun2 <- function(freq1,freq2,freq12){
temp <- apply(freq1,1,fun1,freq2=freq2,freq12=freq12)
return (temp)
}
mutualinfo(vec1,vec2)
mutualin(vec1,vec2)
28*28
vec1=sample(seq(1,255,by=1),784,replace=TRUE)
vec2=sample(seq(1,255,by=1),784,replace=TRUE)
mutualinfo(vec1,vec2)
vec1=sample(seq(1,25,by=1),784,replace=TRUE)
vec2=sample(seq(1,25,by=1),784,replace=TRUE)
mutualin(vec1,vec2)
mutualinfo(vec1,vec2)
system.time(mutualin(vec1,vec2))
system.time(mutualinfo(vec1,vec2))
vec1=sample(seq(1,50,by=1),7840,replace=TRUE)
vec2=sample(seq(1,50,by=1),7840,replace=TRUE)
system.time(mutualin(vec1,vec2))
system.time(mutualinfo(vec1,vec2))
vec1=sample(seq(1,30,by=1),78400,replace=TRUE)
vec2=sample(seq(1,30,by=1),78400,replace=TRUE)
system.time(mutualin(vec1,vec2))
system.time(mutualinfo(vec1,vec2))
vec1=sample(seq(1,40,by=1),78400,replace=TRUE)
vec2=sample(seq(1,40,by=1),78400,replace=TRUE)
system.time(mutualin(vec1,vec2))
system.time(mutualinfo(vec1,vec2))
data=matrix(sample(seq(1,30,by=1),10000,replace=TRUE),100,100)
f=sample(seq(1,5,by=1),100,replace=TRUE)
system.time(mrmr_mid(data,f,5))
getonefea <- function(fea,tloc,f,data){
temploc=tloc[!(tloc %in% fea)]
tempfea=sapply(temploc,function(a,fea) c(fea,a),fea=fea)
allD_R=apply(tempfea,2,D_R,f=f,data=data)
fea=c(fea,temploc[which.max(allD_R)])
return(fea)
}
mrmr_mid <- function(data,f,K){
t<-vector(mode="numeric",length=0)
t = apply(data,2,mutualinfo,vec2=f)
tloc=order(x<--t,y<-1:length(t))
fea<-vector(mode="numeric",length=0)
fea[1]=tloc[1]
for (i in 1:K){
fea=getonefea(fea,tloc,f,data)
}
return (fea)
}
system.time(mrmr_mid(data,f,5))
tloc=c(1:10)
data=matrix(sample(seq(1,20,by=1),100,replace=TRUE),10,10)
fea=c(1:5)
f=sample(seq(1,3,by=1),10,replace=TRUE)
tloc=c(1:10)
data=matrix(sample(seq(1,20,by=1),100,replace=TRUE),10,10)
fea=c(1:5)
f=sample(seq(1,3,by=1),10,replace=TRUE)
library('Rcpp')
library(devtools)
find_rtools(T)
DR <- function(fea,f,data){
newdata=data[,fea]
Dall=apply(newdata,2,mutualinfo,vec2=f)
Dmean=mean(Dall)
Rall=apply(newdata,2,Rone,data=newdata)
Rmean=mean(Rall)
#if you want to delete self mutualinfo
# Rsum=sum(Rall)-sum(diag(Rall))
# Rnum=ncol(Rall)*(nrow(Rall)-1)
# Rmean=Rsum/Rnum
return(Dmean-Rmean)
}
Rone <- function(vec,data){
Rone=apply(data,2,mutualinfo,vec2=vec)
return(Rone)
}
mutualinfo <- function(vec1,vec2) {
vec1 <- round(as.numeric(vec1))
vec2 <- round(as.numeric(vec2))
m <- length(vec1)
n <- length(vec2)
if (m!=n){
print("the two input vector length differ")
return(0)
}
else{
vec<-paste(vec1,vec2)
freq1 <- estpab(vec1)
freq2 <- estpab(vec2)
freq12<- estjointpab(vec1,vec2)
mutual <- sum(apply(freq2,1,fun2,freq1=freq1,freq12=freq12))/log(2)
return (mutual)
}
}
fun1 <- function(freq1,freq2,freq12){
temploc = which(freq12==paste(freq1[1],freq2[1]))
if(sum(temploc)){
temp <- as.numeric(freq12[temploc,2])*log(as.numeric(freq12[temploc,2])/as.numeric(freq1[2])/as.numeric(freq2[2]))
return (temp)
}
else return(0)
}
fun2 <- function(freq1,freq2,freq12){
temp <- apply(freq1,1,fun1,freq2=freq2,freq12=freq12)
return (temp)
}
estjointpabin <- function(vec1,vec2) {
vec1 <- round(as.numeric(vec1))
vec2 <- round(as.numeric(vec2))
m <- length(vec1)
n <- length(vec2)
if (m!=n){
print("the two input variables length differ")
return(0)
}
else{
vec<-paste(vec1,vec2)
freq <- as.numeric(table(vec))
freq <- freq/m
return(freq)
}
}
estpabin <- function(vec) {
vec <- round(vec)
m <- length(vec)
freq <- table(vec)
freq <- as.numeric(freq/m)
return(freq)
}
rm(estjointpabin())
rm(estjointpabin
)
rm(estpabin)
estjointpab <- function(vec1,vec2) {
vec1 <- round(as.numeric(vec1))
vec2 <- round(as.numeric(vec2))
m <- length(vec1)
n <- length(vec2)
if (m!=n){
print("the two input variables length differ")
return(0)
}
else{
vec<-paste(vec1,vec2)
freq <- as.data.frame(table(vec))
freq[,2] <- freq[,2]/m
return(freq)
}
}
estpab <- function(vec) {
vec <- round(vec)
m <- length(vec)
freq <- as.data.frame(table(vec))
freq[,2] <- freq[,2]/m
return(freq)
}
library('Rcpp')
library(devtools)
find_rtools(T)
sourceCpp("optimal2.cpp")
temp=optimal(fea,f,tloc,data)
temp
